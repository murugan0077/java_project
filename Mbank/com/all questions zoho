OOPs Programming

 

 

 

Create a model/class Car and add data by creating Object.( Notes: list out 5 Car details)

 

Write class Calculator with constructor ,method add(),sub(),div()and multi().Write class CalculatorDemo from their create instance of Calculator class and try to access its methods.		

 

Write method for below return type:

Returning a void from a method.

Returning a String array from a method.

Returning an int array from a method.

Passing two integer in to method and print out method

 

Write a model and manager class for Student.

1.Print out all Subject.

2. Print out all Student Names.

3. Top 5 Students 

4. Passed Students

5. Failed Students

6. List out all subjects with highest mark.

 

Write Class MyString Write a method

i) concat(String str)return type String- Concatenates the specified string to the end of this string.

ii) charAt(int index) Returns the char value at the specified index.

iii) endsWith(String suffix) return type boolean-Tests if this string ends with the specified suffix.

iv) static String copyValueOf(char[] data) -Returns a String that represents the character sequence in the array specified.

v) int indexOf(String str)- Returns the index within this string of the first occurrence of the specified substring.

vi) boolean startsWith(String prefix)-Tests if this string starts with the specified prefix.

vii) String substring(int beginIndex)- Returns a new string that is a substring of this string.

 

 

 

Create a class for storing the details of the Donator like donator name,campaign,payment type,etc.

Create a another class for storing the campaign details like launch date, campaign name, list of donator for that campaign,etc

Create a separate class for processing the data of Campaign class and Donator class..

In the main class, Create a menu type structure to add campaigns, add donations, options to list the campaign and donators

All the input should be given during the run time..

Date should be validated, and when the user donates for a campaign, donation date should be between the launch date and deadline..

 

Campaign

Owner 

Campaign Name 

Status - Not Started , Running Completed

Launch Date 

Fundraiser Deadline 

Fundraising Goal 

Amount Raised 

Description 

Event 

Campaign - Completed Campaigns - Ongoing Campaigns

Donation

Contributor Name * 

Campaign * 

Payment Method 

Description 

Email ID * 

Amount * USD 

Payment Date [dd-MMM-yyyy]

 

 

 

Evaluate Your Understanding with below questions.


Basics:

 

Classes and Objects

What is the difference between an object-oriented programming language and an object-based programming language?

What is encapsulation? How can it be achieved in Java?

What is a class?

What is an object?

Different ways to create object in Java

What is a reference?

Difference between reference and object.

Purpose of constructor.

Default values of different data types.

Static:

What is the static variable?

Differenece between instance variable and static variable.

What is the static method?

Differenece between instance method and static method.

What are the restrictions that are applied to the Java static methods?

Can we override the static methods?

What is the static block?

Can we execute a program without main() method?

What is the difference between static (class) method and instance method?

Can we make the abstract methods static in Java?

'this' keyword:

What is 'this' keyword in java?

What are the main uses of 'this' keyword?

Can we assign the reference to 'this' variable?

Can this keyword be used to refer static members?

What is constructor chaining? Role of 'this' keyword in this?

What are the advantages of passing this into a method instead of the current class object itself?

Inheritance:

What is the Inheritance?

Advantages of using the inheritance.

Which class is the superclass for all the classes?

Why is multiple inheritance not supported in java?

What is aggregation?

What is composition?

What is the difference between aggregation and composition?

What is Java instanceOf operator?

'super' keyword:

What is super in java?

How can constructor chaining be done by using the super keyword?

What are the main uses of the super keyword?

What are the differences between this and super keyword?

Can you use this() and super() both in the same constructor?

Polymorphism:

What are the types of polymorphism?

What is method overloading?

Rules for method overloading? Justify the rules.

Can we overload the methods by making them static?

What is method overloading with type promotion?

Can you achieve Runtime Polymorphism by data members?

What is method overriding?

Rules for method overriding? Justify the rules.

Can we override the overloaded method?

Can we override the private methods?

Can we change the scope of the overridden method in the subclass?

Can we modify the throws clause of the superclass method while overriding it in the subclass?

What is the difference between static binding and dynamic binding?

	

'final' keyword:

What is the final variable?

What is the final method?

What is the final class?

What is the final blank variable?

Can we initialize the final blank variable?

Can we declare a constructor as final?

Abstract class & interfaces:

What is the abstraction?

What is the abstract class?

Can there be an abstract method without an abstract class?

Can there be an abstract class without an abstract method?

Can you use abstract and final both with a method?

Is it possible to create an object for the abstract class?

Is it possible to create a reference for the abstract class?

What is the interface?

Can you declare an interface method static? (Before & after Java8)

What is a marker interface? Purpose of a marker interface.

What is a functional interface?

Is it possible to create an object for the interface?

Is it possible to create a reference for the interface?

What are the differences between abstract class and interface?

Can we define private and protected modifiers for the members in interfaces?

When can an object reference be cast to an interface reference?

Access specifiers:

What are the different types access specifiers supported in Java?

We can declare all the instance variables as public if it so why do we need getter and setter methods?

Wrapper class:

What are wrapper classes?

What are auto-boxing and unboxing? When does it occur?

Garbage Collection:

What is Garbage Collection?

Effects using gc()

How is garbage collection controlled?

How can an object be unreferenced?

What is the purpose of the finalize() method?

Packages:

What is the package?

How can we access some class in another class in Java?

What is the static import?

 

Intermediate:

Nested classes:

What is a nested class?

What are the advantages of Java inner classes?

What are the disadvantages of using inner classes?

What are the types of inner classes (non-static nested class) used in Java?

Is there any difference between nested classes and inner classes?

Can we access the non-final local variable, inside the local inner class?

How many class files are created on compiling the OuterClass in the following program?

What are anonymous inner classes?

What is the nested interface?

Can a class have an interface?

Can an Interface have a class?


































Basics:

List the data structures you are aware of.

Why do we need data structures?

Relationship between collections and data structures?

Do we need really java.util.collections? If it so what are benefits?

Hierarchy of collection framework

When to choose which collection?

List

Set

Queue

Map

List the legacy classes and their properties in collection framework.

ist:

Why we use List interface? What are main classes implementing List interface?

Advantages of using ArrayList over array.

Different ways of iterating an ArrayList

Difference between ArrayList and LinkedList?

Difference between ArrayList and Vector

How to convert the array of strings into the list ?

What are different ways to iterate over a list?

Set:

Why we use Set interface? What are main classes implementing Set interface?

Differences Between HashSet, LinkedHashSet and TreeSet

User-defined classes in TreeSet

What is the difference between Comparable and Comparator interface?

Can a null element added to a TreeSet or HashSet?

/span>

Why Map interface does not extend Collection interface?

Why we use Map interface? What are the main classes implementing Map interface?

How to design a good key for HashMap?

What classes should one prefer to use a key in HashMap in java?

What are different Collection views provided by Map interface?

When to use HashMap or TreeMap?

Difference between HashMap and HashTable?

Difference between HashMap and HashSet?

Iterators:

Difference between Iterator and Enumeration?

Difference between Iterator and ListIterator?

Why there is not method like Iterator.add() to add elements to the collection?

Others:

List the methods and their usages in Collections class.

While passing a Collection as argument to a function, how can we make sure the function will not be able to modify it?

What does it mean by 'thread-safe'?

How to make a collection thread safe?

What is UnsupportedOperationException?

Which collection classes provide random access of its elements?

What is Queue and Stack, List their differences?

What are Collections and Arrays class?

If an Employee class is present and its objects are added in an ArrayList. Now I want the list to be sorted by the employeeID of Employee class. What are the steps?

Stream:

What is a stream? How does it differ from a collection?

How can you convert a collection into a stream?

 

Intermediate:

How to reverse the list?

How HashSet works internally?

How HashMap works internally?

What is hash-collision in Hashtable and how it is handled in Java?

What is the importance of hashCode() and equals() methods?

What is the difference between fail-fast and fail-safe iterators?

When will ConcurrentModificationException be thrown?

How to avoid ConcurrentModificationException while iterating a collection?

What is the difference between intermediate and terminal operations?

What is the difference between map and flatMap stream operation?

What is stream pipelining in Java 8?

 

Advanced:

Explain ConcurrentHashMap? How it works?

What are IdentityHashMap and WeakHashMap?

What is BlockingQueue?






































































Basics:

Hierarchy of InputStream and OutputStream classes.

What is the purpose of Reader & Writer hierarchy if there is already Stream hierarchy?

What is the purpose of using BufferedInputStream and BufferedOutputStream classes?

Real time example for BufferedInputStream & BufferedOutputStreams

What is serialization?

How can you make a class serializable in Java?

Can a Serialized object be transferred via network?

What is Deserialization?

What is the transient keyword?

What is Externalizable?

What is the difference between Serializable and Externalizable interface?

 



Exception Handling:

Basics:

What is Exception Handling?

Why do need to handle exceptions?

Hierarchy of Java Exception classes

List the keywords associated with Java exception handling

What is the difference between Checked Exception and Unchecked Exception?

Is it necessary that each try block must be followed by a catch block?

What is finally block? Purpose of the finally block.

Can finally block be used without a catch?

Is there any case when finally will not be executed?

What is the difference between throw and throws?

Can subclass overriding method declare an exception if parent class method doesn't throw an exception?

What is exception propagation?

When should be an exception thrown? When should be an exception catched? Justify with real-time programming example.

Explain the try-with-resources concept. Advantage of using this.

What are the resources that can be declared in 'try'block?

Interfaces associated with 'try-with-resources' concept.
























































Easy:

 

1. Write a Java program to convert temperature from Fahrenheit to Celsius degree. 

Test Data

Input a degree in Fahrenheit: 212

Expected Output:

212.0 degree Fahrenheit is equal to 100.0 in Celsius.

 

2. Write a Java program that reads a number in inches, converts it to meters. 

Note: One inch is 0.0254 meters.

Test Data

Input a value for inch: 1000

Expected Output :

1000.0 inch is 25.4 meters.

 

3. Write a Java program that reads an integer between 0 and 1000 and adds all the digits in the integer. 

Test Data

Input an integer between 0 and 1000: 565

Expected Output :

The sum of all digits in 565 is 16

 

4. Write a Java program to convert minutes into number of years and days. 

Test Data

Input the number of minutes: 3456789

Expected Output :

3456789 minutes is approximately 6 years and 210 days

 

5. Write a Java program that prints the current time in GMT. 

Test Data

Input the time zone offset to GMT: 256

Expected Output:

Current time is 23:40:24

 

6. Write a Java program to compute body mass index (BMI). 

Test Data

Input weight in pounds: 452

Input height in inches: 72

Expected Output:

Body Mass Index is 61.30159143458721

 

7. Write a Java program to takes the user for a distance (in meters) and the time was taken (as three numbers: hours, minutes, seconds), and display the speed, in meters per second, kilometers per hour and miles per hour (hint: 1 mile = 1609 meters). 

Test Data

Input distance in meters: 2500 

Input hour: 5 

Input minutes: 56

Input seconds: 23

Expected Output :

Your speed in meters/second is 0.11691531 

Your speed in km/h is 0.42089513 

Your speed in miles/h is 0.26158804

 

8. Write a Java program that reads a number and display the square, cube, and fourth power.

Sample Input: 12 

Expected Output:

Square: 144 

Cube: 1728

Fourth power: 20736

 

9. Write a Java program that accepts two integers from the user and then prints the sum, the difference, the product, the average, the distance (the difference between integer), the maximum (the larger of the two integers), the minimum (smaller of the two integers). 

Test Data

Input 1st integer: 25 

Input 2nd integer: 5

Expected Output :

Sum of two integers: 30

Difference of two integers: 20

Product of two integers: 125

Average of two integers: 15.00

Distance of two integers: 20

Max integer: 25 

Min integer: 5

 

10. Write a Java program to break an integer into a sequence of individual digits. 

Test Data

Input six non-negative digits: 123456

Expected Output :

1 2 3 4 5 6




























































. Write a Java program to get a number from the user and print whether it is positive or negative. 

Test Data

Input number: 35

Expected Output :

Number is positive

 

2. Write a Java program to solve quadratic equations (use if, else if and else). 

For eg: x2+5x+1

Test Data

Input a: 1 

Input b: 5 

Input c: 1

Expected Output :

The roots are -0.20871215252208009 and -4.7912878474779195 

 

3. Take three numbers from the user and print the greatest number. 

Test Data

Input the 1st number: 25 

Input the 2nd number: 78 

Input the 3rd number: 87

Expected Output :

The greatest: 87

 

4. Write a Java program to read the value of an integer m and display the value of n is 1 when m is larger than 0, 0 when m is 0 and -1 when m is less than 0. 

Test Data

Input a number: 25 

Expected Output :

The value of m = 25.0

The value of n = 1

 

5. Write a Java program that keeps a number from the user and generates an integer between 1 and 7 and displays the name of the weekday. 

Test Data

Input number: 3 

Expected Output :

Wednesday

6. Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. 

Test Data

Input floating-point number: 1256

Input floating-point another number: 3254

Expected Output :

They are different

 

7. Write a Java program to find the number of days in a month. 

Test Data

Input a month number: 2

Input a year: 2016

Expected Output :

February 2016 has 29 days

 

8. Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length > 1, print an error message. 

Test Data

Input an alphabet: p

Expected Output :

Input letter is Consonant

 

9. Write a Java program that takes a year from user and print whether that year is a leap year or not. 

Test Data

Input the year: 2016

Expected Output :

2016 is a leap year

	

10. Write a program in Java to display the first 10 natural numbers. 

Expected Output :

The first 10 natural numbers are:                                                

1                                                                                

2                                                                                

3                                                                                

4                                                                                

5                                                                                

6                                                                                

7                                                                                

8                                                                                

9                                                                                

10

 

11. Write a program in Java to display n terms of natural numbers and their sum. 

Test Data

Input the number: 2

Expected Output :

Input number:                                                                    

2                                                                                

The first n natural numbers are :                                                

2                                                                                

1                                                                                

2                                                                                

The Sum of Natural Number upto n terms :                                         

23

 

12. Write a program in Java to input 5 numbers from keyboard and find their sum and average. 

Test Data

Input the 5 numbers : 1 2 3 4 5 

Expected Output :

Input the 5 numbers :                                                            

1                                                                                

2                                                                                

3                                                                                

4                                                                                

5                                                                                

The sum of 5 no is : 15                                                          

The Average is : 3.0           

               

13. Write a program in Java to display the cube of the number upto given an integer. 

Test Data

Input number of terms : 4

Expected Output :

Number is : 1 and cube of 1 is : 1                                               

Number is : 2 and cube of 2 is : 8                                               

Number is : 3 and cube of 3 is : 27                                              

Number is : 4 and cube of 4 is : 64

 

14. Write a program in Java to display the multiplication table of a given integer. 

Test Data

Input the number (Table to be calculated) : Input number of terms : 5

Expected Output :

5 X 0 = 0                                                                        

5 X 1 = 5                                                                        

5 X 2 = 10                                                                       

5 X 3 = 15                                                                       

5 X 4 = 20                                                                       

5 X 5 = 25

 

15. Write a program in Java to display the n terms of odd natural number and their sum. 

Test Data

Input number of terms is: 5 

Expected Output :

The odd numbers are :                                                            

1                                                                                

3                                                                                

5                                                                                

7                                                                                

9                                                                                

The Sum of odd Natural Number upto 5 terms is: 25

 

16. Write a program in Java to display the pattern like right angle triangle with a number. 

Test Data

Input number of rows : 10 

Expected Output :

1                                                                                

12                                                                               

123                                                                              

1234                                                                             

12345                                                                            

123456                                                                           

1234567                                                                          

12345678                                                                         

123456789                                                                        

12345678910

 

17. Write a program in Java to make such a pattern like right angle triangle with a number which will repeat a number in a row.The pattern is as follows : 

1

22

333

4444

 

18. Write a program in Java to make such a pattern like right angle triangle with number increased by 1.The pattern like : 

1

2 3

4 5 6

7 8 9 10 

 

19. Write a program in Java to make such a pattern like a pyramid with a number which will repeat the number in the same row. 

1

2 2

3 3 3

4 4 4 4 

 

20. Write a Java program to print the following grid. 

Expected Output :

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -  

 

20. Write a program in Java to print the Floyd's Triangle. 

Test Data

Input number of rows : 5 

Expected Output :

1                                                                                

01                                                                               

101                                                                              

0101                                                                             

10101

 

21. Write a program in Java to display the pattern like a diamond. 

Test Data

Input number of rows (half of the diamond) : 7 

Expected Output :

*                                                                          

***                                                                         

*****                                                                        

*******                                                                       

*********                                                                      

***********                                                                     

*************                                                                    

***********                                                                     

*********                                                                      

*******                                                                       

*****                                                                        

***                                                                         

*           

          

22. Write a Java program to display Pascal's triangle. 

Test Data

Input number of rows: 5 

Expected Output :

Input number of rows: 5                                                          

1                                                                          

1 1                                                                         

1 2 1                                                                        

1 3 3 1                                                                       

1 4 6 4 1                   

   

23. Write a java program to generate a following *'s triangle. 

Test Data

Input the number: 6 

Expected Output :

******                                                   

*****                                                   

****                                                   

***                                                   

**                                                   

* 

 

24. Write a java program to generate a following @'s triangle. 

Test Data

Input the number: 6 

Expected Output :

@                                                  

@@                                                  

@@@                                                  

@@@@                                                  

@@@@@                                                  

@@@@@@

 

25. Write a Java program to display the number rhombus structure. 

Test Data

Input the number: 7 

Expected Output :

1                                                  

212                                                 

32123                                                

4321234                                               

543212345                                              

65432123456                                             

7654321234567                                            

65432123456                                             

543212345                                              

4321234                                               

32123                                                

212                                                 

1   

 

26. Write a Java program to display the following character rhombus structure. 

Test Data

Input the number: 7 

Expected Output :

A                                                  

ABA                                                 

ABCBA                                                

ABCDCBA                                               

ABCDEDCBA                                              

ABCDEFEDCBA                                             

ABCDEFGFEDCBA                                            

ABCDEFEDCBA                                             

ABCDEDCBA                                              

ABCDCBA                                               

ABCBA                                                

ABA                                                 

A    

 

27. Write a Java program that reads an integer and check whether it is negative, zero, or positive. 

Test Data

Input a number: 7 

Expected Output :

Number is positive

	

28. Write a Java program that reads a floating-point number. If the number is zero it prints "zero", otherwise, print "positive" or "negative". Add "small" if the absolute value of the number is less than 1, or "large" if it exceeds 1,000,000. 

Test Data

Input a number: -2534 

Expected Output :

Negative

29. Write a Java program that reads an positive integer and count the number of digits the number (less than ten billion) has. 

Test Data

Input an integer number less than ten billion: 125463

Expected Output :

Number of digits in the number: 6

 

30. Write a Java program that accepts three numbers and prints "All numbers are equal" if all three numbers are equal, "All numbers are different" if all three numbers are different and "Neither all are equal or different" otherwise. 

Test Data

Input first number: 2564

Input second number: 3526 

Input third number: 2456

Expected Output :

All numbers are different

 

31. Write a program that accepts three numbers from the user and prints "increasing" if the numbers are in increasing order, "decreasing" if the numbers are in decreasing order, and "Neither increasing or decreasing order" otherwise. 

Test Data

Input first number: 1524 

Input second number: 2345

Input third number: 3321

Expected Output :

Increasing order

 

32. Write a Java program that accepts two floating ­point numbers and checks whether they are the same up to two decimal places. 

Test Data

Input first floating­ point number: 1235

Input second floating­ point number: 2534 

Expected Output :

These numbers are different.

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Easy:

1. Write a Java program to sort a numeric array and a string array. 

 

2. Write a Java program to sum values of an array. 

 

3. Write a Java program to print the following grid. 

Expected Output :

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -                                                                                           

- - - - - - - - - -  

 

4. Write a Java program to calculate the average value of array elements. 

 

5. Write a Java program to test if an array contains a specific value. 

 

6.Write a Java program to find the index of an array element. 

 

7. Write a Java program to remove a specific element from an array. 

 

8. Write a Java program to copy an array by iterating the array. 

 

9. Write a Java program to insert an element (specific position) into an array. 

 

10. Write a Java program to find the maximum and minimum value of an array. 

 

11. Write a Java program to reverse an array of integer values. 

 

12. Write a Java program to find the duplicate values of an array of integer values. 

 

13. Write a Java program to find the duplicate values of an array of string values. 

 

14. Write a Java program to find the common elements between two arrays (string values). 

 

15. Write a Java program to find the common elements between two arrays of integers. 

 

16. Write a Java program to remove duplicate elements from an array. 

 

17. Write a Java program to find the second largest element in an array. 

 

18. Write a Java program to find the second smallest element in an array. 

 

19. Write a Java program to add two matrices of the same size. 

 

20. Write a Java program to convert an array to ArrayList. 

 

21. Write a Java program to convert an ArrayList to an array. 

 

22. Write a Java program to find all pairs of elements in an array whose sum is equal to a specified number. 

 

23. Write a Java program to test the equality of two arrays. 

 

24. Write a Java program to find a missing number in an array. 

 

25. Write a Java program to find common elements from three sorted (in non-decreasing order) arrays. 

	

26. Write a Java program to move all 0's to the end of an array. Maintain the relative order of the other (non-zero) array elements. 

 

27. Write a Java program to find the number of even and odd integers in a given array of integers. 

 

28. Write a Java program to get the difference between the largest and smallest values in an array of integers. The length of the array must be 1 and above. 

	

 

29. Write a Java program to compute the average value of an array of integers except the largest and smallest values. 

 

30. Write a Java program to check if an array of integers without 0 and -1. 

 

31. Write a Java program to check if the sum of all the 10's in the array is exactly 30. Return false if the condition does not satisfy, otherwise true. 

 

32. Write a Java program to check if an array of integers contains two specified elements 65 and 77. 

 

33. Write a Java program to remove the duplicate elements of a given array and return the new length of the array.

Sample array: [20, 20, 30, 40, 50, 50, 50]

After removing the duplicate elements the program should return 4 as the new length of the array.  

 

34. Write a Java program to find the length of the longest consecutive elements sequence from a given unsorted array of integers.

Sample array: [49, 1, 3, 200, 2, 4, 70, 5] 

The longest consecutive elements sequence is [1, 2, 3, 4, 5], therefore the program will return its length 5.  

 

35. Write a Java program to find the sum of the two elements of a given array which is equal to a given integer.

Sample array: [1,2,4,5,6] 

Target value: 6.  

 

36. Write a Java program to find all the unique triplets such that sum of all the three elements [x, y, z (x ≤ y ≤ z)] equal to a specified number.

Sample array: [1, -2, 0, 5, -1, -4]

Target value: 2.  

 

37. Write a Java program to create an array of its anti-diagonals from a given square matrix.  

 

Example:

Input : 

1 2

3 4

Output: 

[

[1],

[2, 3],

[4]

]

38. Write a Java program to get the majority element from an given array of integers containing duplicates.  

Majority element: A majority element is an element that appears more than n/2 times where n is the size of the array.

 

39. Write a Java program to print all the LEADERS in the array.   

Note: An element is leader if it is greater than all the elements to its right side.

 

40. Write a Java program to find the two elements from a given array of positive and negative numbers such that their sum is close to zero.   

 

41. Write a Java program to find smallest and second smallest elements of a given array.   

 

42. Write a Java program to segregate all 0s on left side and all 1s on right side of a given array of 0s and 1s.   

 

43. Write a Java program to find all combination of four elements of an given array whose sum is equal to a given value.   

 

44. Write a Java program to count the number of possible triangles from an given unsorted array of positive integers.   

 

45. Write a Java program to cyclically rotate a given array clockwise by one.   

 

46. Write a Java program to check whether there is a pair with a specified sum of a given sorted and rotated array.   

 

47. Write a Java program to find the rotation count in a given rotated sorted array of integers.   

 

48. Write a Java program to arrange the elements of an given array of integers where all negative integers appear before all the positive integers.   

 

49. Write a Java program to arrange the elements of an given array of integers where all positive integers appear before all the negative integers.   

 

50. Write a Java program to sort an array of positive integers of an array, in the sorted array the value of the first element should be maximum, second value should be minimum value, third should be second maximum, fourth second be second minimum and so on.   

 

51. Write a Java program to separate 0s on left side and 1s on right side of an array of 0s and 1s in random order.   

 

52. Write a Java program to separate even and odd numbers of an array of integers. Put all even numbers first, and then odd numbers.   

 

53. Write a Java program to replace every element with the next greatest element (from right side) in a given array of integers.   

 

Medium:

(Note: In these programs consider a string as array of chars)

Given a list of integers, find the highest product you can get from three of the integers.

Suppose we had a list of n integers sorted in ascending order. How quickly could we check if a given integer is in the list?

Write a function that takes a list of characters and reverses the letters in place.

Write a function reverse_words() that takes a message as a list of characters and reverses the order of the words in place.

Paranthesis validation

"Sometimes (when I nest them (my parentheticals) too much (like this (and this))) they get confusing."

Write a function that, given a sentence like the one above, along with the position of an opening parenthesis, finds the corresponding closing parenthesis.

Example: if the example string above is input with the number 10 (position of the first parenthesis), the output should be 79 (position of the last parenthesis).



Logical Advanced:





1.There exists a staircase with N steps, and you can climb up either 1 or 2 steps at a time. Given N, write a function that returns the number of unique ways you can climb the staircase. The order of the steps matters.

For example, if N is 4, then there are 5 unique ways:

1, 1, 1, 1

2, 1, 1

1, 2, 1

1, 1, 2

2, 2

What if, instead of being able to climb 1 or 2 steps at a time, you could climb any number from a set of positive integers X? For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps at a time.

 

 

2.Given a string and a number of lines k, print the string in zigzag form. In zigzag, characters are printed out diagonally from top left to bottom right until reaching the kth line, then back up to top right, and so on.

For example, given the sentence "thisisazigzag"and k = 4, you should print:  

Out format check this url : https://imgur.com/a/ERaRQBi


3.Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Solve it without using division and in O(n) time.

For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].

 

4.Given a set of integers, return whether the set can be partitioned into two subsets whose sums are the same.

For example, given the set {15, 5, 20, 10, 35, 25}, it would return true, since we can split the set up into {15, 5, 10, 15} and {20, 35}, which both add up to 55.

Given the set {15, 5, 20, 10, 35}, it would return false, since we can't split the set up into two subsets that add up to the same sum.

 

 

 

 

 

 

 

5.Given a N by M matrix of numbers, print out the matrix in a clockwise spiral.

For example, given the following matrix:

[[1, 2, 3, 4, 5],

[6, 7, 8, 9, 10],

[11, 12, 13, 14, 15],

[16, 17, 18, 19, 20]]

You should print out the following:

1

2

3

4

5

10

15

20

19

18

17

16

11

6

7

8

9

14

13

12

 

 



Advanced Logical :



1. Given a mapping of digits to letters (as in a phone number), and a digit string, return all possible letters the number could represent. You can assume each valid number in the mapping is a single digit. For example if {“2”: [“a”, “b”, “c”], 3: [“d”, “e”, “f”], …} then “23” should return [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf"]. 

2. Given an array of integers, write a function to determine whether the array could become non-decreasing by modifying at most 1 element. For example, given the array [10, 5, 7], you should return true, since we can modify the 10 into a 1 to make the array non-decreasing. Given the array [10, 5, 1], you should return false, since we can't modify any one element to get a non-decreasing array. 

3. Given a list of possibly overlapping intervals, return a new list of intervals where all overlapping intervals have been merged. The input list is not necessarily ordered in any way. For example, given [(1, 3), (5, 8), (4, 10), (20, 25)], you should return [(1, 3), (4, 10), (20, 25)]. 

4. Given a multiset of integers, return whether it can be partitioned into two subsets whose sums are the same. For example, given the multiset {15, 5, 20, 10, 35, 15, 10}, it would return true, since we can split it up into {15, 5, 10, 15, 10} and {20, 35}, which both add up to 55. Given the multiset {15, 5, 20, 10, 35}, it would return false, since we can't split it up into two subsets that add up to the same sum. 

5. There is an N by M matrix of zeroes. Given N and M, write a function to count the number of ways of starting at the top-left corner and getting to the bottom-right corner. You can only move right or down. 

6. Given a 2D matrix of characters and a target word, write a function that returns whether the word can be found in the matrix by going left-to-right, or up-to-down. 
For example, given the following matrix: 
[['F', 'A', 'C', 'I'], 
['O', 'B', 'Q', 'P'], 
['A', 'N', 'O', 'B'], 
['M', 'A', 'S', 'S']] 
and the target word 'FOAM', you should return true, since it's the leftmost column. Similarly, given the target word 'MASS', you should return true, since it's the last row. 

7. Given a N by M matrix of numbers, print out the matrix in a clockwise spiral. 

8. Given a list of integers, return the largest product that can be made by multiplying any three integers. For example, if the list is [-10, -10, 5, 2], we should return 500, since that's -10 -10 5. 

9.A number is considered perfect if its digits sum up to exactly 10. Given a positive integer n, return the n-th perfect number. For example, given 1, you should return 19. Given 2, you should return 28. 

10. A left rotation operation on an array of size shifts each of the array's elements unit to the left. For example, if 2 left rotations are performed on [1,2,3,4,5 ]array , then the array would become [3,4,5,1,2].




























































Create a method called "calculateAverage" that takes an array of integers as an argument and returns the average of the numbers in the array.
Create a method called "reverseString" that takes a string as an argument and returns the reverse of the string.
Create a method called "isPalindrome" that takes a string as an argument and returns true if the string is a palindrome (reads the same backward as forward) and false otherwise.
Create a method called "findMax" that takes an array of integers as an argument and returns the largest number in the array.
Create a method called "calculateFactorial" that takes an integer as an argument and returns the factorial of the number.
Classes and Objects:

Create a class called "Student" with properties such as "name", "age", and "grade". Implement the necessary getter and setter methods for each property.
Create a class called "BankAccount" with properties such as "balance", "accountNumber", and "accountType". Implement the necessary getter and setter methods for each property.
Create a class called "Rectangle" with properties such as "length" and "width". Implement methods such as "getArea" and "getPerimeter" that calculate and return the area and perimeter of the rectangle.
Create a class called "Employee" with properties such as "name", "salary", and "hireDate". Implement the necessary getter and setter methods for each property.
Create a class called "Book" with properties such as "title", "author", and "publisher". Implement the necessary getter and setter methods for each property.
Inheritance:

Create a class called "Animal" with properties such as "name", "age", and "species". Create a subclass called "Dog" that inherits from the Animal class and adds properties such as "breed" and "color".
Create a class called "Vehicle" with properties such as "make", "model", and "year". Create a subclass called "Car" that inherits from the Vehicle class and adds properties such as "color" and "numDoors".
Create a class called "Shape" with properties such as "numSides" and "area". Create a subclass called "Rectangle" that inherits from the Shape class and adds properties such as "length" and "width".
Create a class called "Person" with properties such as "name", "age", and "address". Create a subclass called "Student" that inherits from the Person class and adds properties such as "grade" and "school".
Create a class called "Animal" with properties such as "name", "age", and "species". Create a subclass called "Cat" that inherits from the Animal class and adds properties such as "color" and "numLives".
Polymorphism:

Create a class called "Shape" with a method called "draw" that prints out "Drawing a shape". Create subclasses such as "Rectangle" and "Circle" that override the draw method to print out "Drawing a rectangle" and "Drawing a circle" respectively.
Create a class called "Animal" with a method called "speak" that prints out a message such as "The animal says roar". Create subclasses such as "Dog" and "Cat" that override the speak method to print out "The dog says woof" and "The cat says meow" respectively.
Create an interface called "Playable" with a method called "play". Create classes such as "Guitar" and "Piano" that implement the "Playable" interface.
Here are the medium-level tasks:

Write a Java program that demonstrates the use of inheritance by creating a parent class and a child class that inherits from it. Instantiate objects of both classes and invoke their methods
Create a program that simulates a game of tic-tac-toe between two players. The program should display the game board and allow the players to make moves until one of them wins or the game ends in a tie.

Write a program that reads a text file and counts the number of occurrences of each word in the file. The program should display the results in alphabetical order.

Implement a stack data structure in Java using an array or a linked list. The stack should have push, pop, and peek methods.

Write a program that reads a CSV file and creates objects based on the data. The program should use reflection to dynamically create objects of different classes based on the headers of the CSV file.

Implement a binary search algorithm in Java to search for an element in an array.

Create a program that generates a random maze and solves it using a depth-first search algorithm.

Write a program that implements a simple chat server using sockets. The server should allow multiple clients to connect and communicate with each other.

Implement a binary tree data structure in Java using either an array or a linked list. The tree should have methods for inserting, deleting, and searching for nodes.

Write a program that implements a simple neural network for image recognition. The program should train the network on a set of images and then use it to classify new images.

Implement a graph data structure in Java using either an adjacency matrix or an adjacency list. The graph should have methods for adding and removing vertices and edges, and for traversing the graph.

Create a program that uses recursion to solve a complex problem, such as the Tower of Hanoi or the Fibonacci sequence.

Write a program that implements a simple web server using sockets. The server should be able to serve static content, handle dynamic requests using CGI scripts, and support HTTP/1.1.

Implement a hash table data structure in Java using either an array or a linked list. The hash table should have methods for inserting, deleting, and searching for keys.

Create a program that uses machine learning to classify text documents into categories. The program should use a naive Bayes classifier and a bag-of-words representation of the documents.

Here are the tasks that can be considered advanced:

Implement an abstract class in Java with at least one abstract method. Create a concrete class that extends the abstract class and implement the abstract method. Instantiate the concrete class and invoke its method.

Write a Java program that reads a file using BufferedReader and stores the data into an ArrayList. Use Iterator to traverse the list and display the content.

Create a HashMap in Java that stores a set of words as keys and their frequencies as values. Implement a method that takes a string as input, splits it into words, and updates the HashMap with their frequencies. Test the method with different inputs.

Create a Java program that demonstrates the use of ArrayList and LinkedList by adding, removing, and accessing elements in both collections. Compare their performance for large data sets.

Implement a thread in Java that prints the numbers from 1 to 10 with a delay of 1 second between each number. Use the sleep() method to achieve the delay.

Implement a generic class in Java that stores a collection of elements of any type. Use the class to store strings, integers, and custom objects. Demonstrate the use of wildcard and bounded type parameters.

Create a Java program that reads a CSV file using FileReader and stores the data into a HashSet. Implement a method that takes a string as input and searches the HashSet for matching entries. Display the results.

Implement a PriorityQueue in Java that stores a set of tasks with priorities. Use a custom Comparator to define the order of tasks. Demonstrate the use of add(), remove(), and peek() methods.

Write a Java program that reads a file using FileInputStream and encrypts its content using XOR encryption. Save the encrypted data to a new file using FileOutputStream. Implement a method that decrypts the encrypted data.

Create a Java program that generates a random sequence of numbers and sorts them using Bubble Sort, Selection Sort, Insertion Sort, and Quick Sort algorithms. Compare their performance for large data sets.

Implement a recursive function in Java that calculates the n-th Fibonacci number. Test the function with different values of n.

Create a multithreaded Java program that performs a set of computations on a large dataset. Use parallel processing to speed up the computations and compare the performance with the single-threaded version.

Create a Java program that reads data from a web service using REST API calls. Use a JSON library to parse the data and display it in a user-friendly format.

Note that the difficulty of these tasks can vary depending on the developer's level of expertise, experience, and familiarity with the tools and frameworks used.















































Building a Library Management System in Java with MySQL database involves several components such as designing the database schema, creating the user interface, and writing the application logic. Here are the basic steps involved:

Designing the Database Schema: The database schema for a library management system can be designed using a tool like MySQL Workbench. The schema will include tables for books, borrowers, reservations, and borrowing history.

Setting up the Database: Once the schema is designed, you can create the database using MySQL. You can use JDBC (Java Database Connectivity) to connect to the MySQL database from your Java application.

Writing the Application Logic: The application logic will include code to handle user input, update the database, and retrieve data from the database. You can use Java classes and methods to write the application logic.

Here are a few ideas for real-time applications that you can practice building using Java:
E-commerce website: This application will allow users to browse and purchase products, manage their orders, and keep track of their shopping history.

Stock Trading System: This application will allow users to buy and sell stocks, manage their portfolio, and view real-time stock prices.

Social Media Platform: This application will allow users to connect with friends, post updates, share media, and chat in real-time.

Online Banking System: This application will allow users to manage their bank accounts, transfer funds, pay bills, and view their transaction history.

These are just a few ideas, but there are many other real-time applications you can practice building using Java. The key is to choose an application that interests you and provides an opportunity to learn and practice new skills.



























































Note: Select an IDE that is convenient for you and complete your Java assignments. It is essential to ensure that all the necessary Java source files are present in a directory named 'basics'. After completion, compress the directory into a zip folder named 'Basics.zip' and proceed to upload it to the 'Assignments' section located in the 'Basics' course."

Here are some basic tasks you can try out on variables, conditions, and operators in Java programming:
Print out "Hello, world!" to the console.

Create a program that asks the user for their name and then greets them by name.

Declare two variables of type int called num1 and num2. Assign them values of your choice. Write a program that compares num1 and num2 and prints out whether num1 is greater than, less than, or equal to num2.

Write a program that asks the user to enter a number and then prints out whether the number is positive, negative, or zero.

Create a program that asks the user to enter their age. If the user is 18 or older, print out "You are an adult." Otherwise, print out "You are not yet an adult."

Write a program that asks the user to enter a temperature in Celsius and converts it to Fahrenheit. The formula for converting Celsius to Fahrenheit is F = (C * 9/5) + 32.

Create a program that generates a random number between 1 and 10 and asks the user to guess the number. Provide feedback to the user if their guess is too high or too low, and keep track of how many guesses it takes them to get the correct answer.

Write a program that asks the user to enter a number between 1 and 100. If the number is between 1 and 50, print out "The number is in the lower half." If the number is between 51 and 100, print out "The number is in the upper half." If the number is outside the range of 1 to 100, print out "Invalid number."

Create a program that asks the user to enter a string and then checks whether the string contains the word "Java". If it does, print out "The string contains Java." If it doesn't, print out "The string does not contain Java."

Write a program that calculates the sum of two numbers and prints the result.

Create a program that generates a random number between 1 and 100 and asks the user to guess the number. Provide feedback to the user if their guess is too high or too low, and keep track of how many guesses it takes them to get the correct answer.

Write a program that takes a string as input and reverses the order of the characters in the string.

Create a program that reads in a list of numbers from the user and then calculates the average of those numbers.

Implement a program that determines whether a given string is a palindrome (i.e., it reads the same forwards and backwards).

Write a program that finds the largest and smallest numbers in an array of integers.

Create a program that reads in a list of names from the user and then sorts them in alphabetical order.

Write a program that generates a multiplication table for a given number.

 

These tasks should give you a good starting point to practice your Java programming skills. 



Here are some tasks related to array manipulation and loops in Java:

 

Write a program to find the sum of all the elements in an array of integers.

Write a program to find the largest element in an array of integers.

Write a program to find the average of all the elements in an array of doubles.

Write a program to print the elements of an array of strings in reverse order.

Write a program to print the first 10 numbers of the Fibonacci sequence.

 

These tasks involve different array manipulation and loop concepts in Java, such as iterating over arrays, finding the largest element, computing averages, reversing arrays, and generating sequences.

 

Here are some questions on string manipulation tasks in Java:

Write a program to reverse a given string without using any built-in function.

Write a program to find the length of the longest substring without repeating characters in a given string.

Write a program to count the number of words in a given string.

Write a program to find the most frequent character in a given string.

Write a program to check if two given strings are anagrams or not.

Write a program to remove all the white spaces from a given string.

Write a program to capitalize the first letter of each word in a given string.

Write a program to find the first non-repeated character in a given string.

These questions involve different string manipulation concepts in Java, such as reversing a string, finding substrings, counting characters, checking for anagrams, removing white spaces, capitalizing letters, and searching for unique characters.

 

Some Questions on pattern printing in Java:

Square pattern of stars:





*****
*****
*****
*****
*****


Right triangle pattern of stars:





*
**
***
****
*****


Left triangle pattern of stars:





    *
   **
  ***
 ****
*****


Diamond pattern of stars:





   *
  ***
 *****
*******
 *****
  ***
   *


Pyramid pattern of numbers:





    1
   121
  12321
 1234321
123454321


Staircase pattern of stars:





*
**
***
****
*****


Hollow square pattern of stars:





*****
*      *
*      *
*      *
*****


Hollow diamond pattern of stars:





   *
  * *
 *   *
*     *
 *   *
  * *
   *




These examples showcase different pattern printing concepts and techniques in Java.
 

 

Here are some advanced questions on array manipulation in Java:

Write a program to find the second largest element in an array of integers.

Write a program to find the smallest and largest elements in an array of integers.

Write a program to sort an array of integers in ascending and descending order.

Write a program to rotate the elements of an array by a given number of positions.

Write a program to find the common elements between two arrays of integers.

Write a program to find the sum of two matrices of the same size.

Write a program to find the transpose of a matrix.

Write a program to multiply two matrices of compatible dimensions.

These questions involve different array manipulation concepts in Java, such as finding elements, sorting arrays, rotating elements, searching for common elements, working with matrices, and performing matrix operations.

 

 

Some advanced logical questions on looping and recursion in Java:

Write a program to find all possible permutations of a given string using recursion.

Write a program to find the Fibonacci sequence up to a given limit using looping.

Write a program to check if a given number is a prime number using recursion.

Write a program to calculate the factorial of a given number using recursion.

Write a program to generate all possible subsets of a given set using recursion.

Write a program to generate the first n prime numbers using looping.

Write a program to find the greatest common divisor (GCD) of two numbers using recursion.

Write a program to find the least common multiple (LCM) of two numbers using looping.

These questions involve different advanced logical concepts in Java, such as generating permutations and subsets, calculating Fibonacci sequence, prime numbers, factorials, and performing mathematical operations using recursion and looping.

Good Luck!
 


Note: Select an IDE that is convenient for you and complete your Java assignments. It is essential to ensure that all the necessary Java source files are present in a directory named 'basics'. After completion, compress the directory into a zip folder named 'Basics.zip' and proceed to upload it to the 'Assignments' section located in the 'Basics' course."






































